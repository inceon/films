{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","error","isLoaded","items","this","getData","fetch","then","res","json","result","files","films","content","split","setState","parsedItems","map","item","reduce","acc","watched","push","unwatched","message","console","log","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"wNAGqBA,G,wDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,MAAO,IALQ,E,gEAUjBC,KAAKC,Y,gCAGI,IAAD,OACRC,MAAM,iEACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GAAY,IAAD,MACV,cAAOA,QAAP,IAAOA,GAAP,UAAOA,EAAQC,aAAf,iBAAO,EAAeC,aAAtB,iBAAO,EAAsBC,eAA7B,aAAO,EAA+BC,MAAM,SAE9C,SAACb,GACC,EAAKc,SAAS,CACZb,UAAU,EACVD,aAILM,MACC,SAACJ,GACC,IAAIa,EAAcb,EAAMc,KAAI,SAAAC,GAAI,OAAIA,EAAKJ,MAAM,QAAMK,QAAO,SAACC,EAAKF,GAMhE,MALe,MAAZA,EAAK,GACNE,EAAIC,QAAQC,KAAKJ,GAEjBE,EAAIG,UAAUD,KAAKJ,GAEdE,IACN,CACDC,QAAS,GACTE,UAAW,KAEb,EAAKR,SAAS,CACZb,UAAU,EACVC,MAAOa,S,+BAMP,IAAD,EAC4BZ,KAAKJ,MAAhCC,EADD,EACCA,MAAOC,EADR,EACQA,SAAUC,EADlB,EACkBA,MACzB,OAAIF,EACK,4EAAeA,EAAMuB,SAClBtB,GAGVuB,QAAQC,IAAIvB,GAEV,yBAAKwB,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,QAAf,MACA,yBAAKA,UAAU,cACb,yBAAKA,UAAU,OAAf,OACA,yBAAKA,UAAU,OAAf,SAGJ,yBAAKA,UAAU,SACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,iBAAf,eACCxB,EAAMoB,UAAUN,KAAI,SAAAC,GAAI,OAAI,yBAAKS,UAAU,QAAQT,EAAK,QAE3D,yBAAKS,UAAU,WACb,yBAAKA,UAAU,iBAAf,WACCxB,EAAMkB,QAAQJ,KAAI,SAAAC,GAAI,OAAI,yBAAKS,UAAU,QAAQT,EAAK,WAnBxD,gH,GAtDoBU,IAAMC,YCSnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACLwB,QAAQxB,MAAMA,EAAMuB,a","file":"static/js/main.33e82f8f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  getData() {\n    fetch(\"https://api.github.com/gists/0625da34ba5ad971b984001392e31a53\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          return result?.files?.films?.content?.split('\\n')\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n      .then(\n        (items) => {\n          let parsedItems = items.map(item => item.split(';')).reduce((acc, item) => {\n            if(item[1] === '1') {\n              acc.watched.push(item);\n            } else {\n              acc.unwatched.push(item);\n            }\n            return acc;\n          }, {\n            watched: [],\n            unwatched: []\n          });\n          this.setState({\n            isLoaded: true,\n            items: parsedItems\n          });\n        }\n      );\n  }\n\n  render() {\n    const { error, isLoaded, items } = this.state;\n    if (error) {\n      return <div>Помилка: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Завантаження...</div>;\n    } else {\n      console.log(items);\n      return (\n        <div className=\"App\">\n          <div className=\"header\">\n            <div className=\"logo\">fs</div>\n            <div className=\"navigation\">\n              <div className=\"tab\">one</div>\n              <div className=\"tab\">two</div>\n            </div>\n          </div>\n          <div className=\"items\">\n            <div className=\"not-watched\">\n              <div className=\"category-name\">Not Watched</div>\n              {items.unwatched.map(item => <div className=\"card\">{item[0]}</div>)}\n            </div>\n            <div className=\"watched\">\n              <div className=\"category-name\">Watched</div>\n              {items.watched.map(item => <div className=\"card\">{item[0]}</div>)}\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}